from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from config import TOKEN
import keyboards as kb
from utils import Curs
from base import DBController

bot = Bot(token = TOKEN)
dp = Dispatcher(bot)

db = DBController("botbase.db")




@dp.callback_query_handler(lambda c: c.data == "usd")
async def process_callback_usd(callback_query: types.CallbackQuery):
    db.add_account(callback_query.from_user.id, "usd")
    await bot.send_message(callback_query.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")

@dp.callback_query_handler(lambda c: c.data == "uzb")
async def process_callback_usd(callback_query: types.CallbackQuery):
    db.add_account(callback_query.from_user.id, "uzb")
    await bot.send_message(callback_query.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")

@dp.callback_query_handler(lambda c: c.data == "rub")
async def process_callback_usd(callback_query: types.CallbackQuery):
    db.add_account(callback_query.from_user.id, "rub")
    await bot.send_message(callback_query.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")

@dp.callback_query_handler(lambda c: c.data == "tjk")
async def process_callback_usd(callback_query: types.CallbackQuery):
    db.add_account(callback_query.from_user.id, "tjk")
    await bot.send_message(callback_query.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")





@dp.message_handler(commands = ['start'])
async def process_start_command(msg: types.Message):
    if not db.get_user(msg.from_user.id):
        await bot.send_message(msg.from_user.id, f"–ü—Ä–∏–≤–µ—Ç {msg.from_user.first_name} –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≤–∞–ª—é—Ç—É", reply_markup=kb.greet_kb1)
    else:
        await bot.send_message(msg.from_user.id, f"–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å {msg.from_user.first_name} !!!\n–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É")


@dp.message_handler(commands = ['discharge'])
async def process_start_command(msg: types.Message):
    db.delete_user(msg.from_user.id)
    await bot.send_message(msg.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã")


cs = Curs()

@dp.message_handler()
async def process_message_comand(msg: types.Message):
    if msg.text == '–°–æ–º–æ–Ω–∏ üáπüáØ':
        try:
            saved = db.get_saved(msg.from_user.id)
            ans_bot = cs.ans(f"{saved}", "tjk")
            await bot.send_message(msg.from_user.id, f"{ans_bot}")
            await bot.send_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
        except:
            await bot.send_message(msg.from_user.id, "–í–∞—Å –Ω–µ—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≤–∞–ª—é—Ç—É —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", reply_markup=kb.greet_kb1)

    elif msg.text == '–î–æ–ª–ª–∞—Ä üá∫üá∏':
        try:
            saved = db.get_saved(msg.from_user.id)
            ans_bot = cs.ans(f"{saved}", "usd")
            await bot.send_message(msg.from_user.id, f"{ans_bot}")
            await bot.send_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
        except:
            await bot.send_message(msg.from_user.id, "–í–∞—Å –Ω–µ—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≤–∞–ª—é—Ç—É —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", reply_markup=kb.greet_kb1)

    elif msg.text == '–†—É–±–ª—å üá∑üá∫':
        try:
            saved = db.get_saved(msg.from_user.id)
            ans_bot = cs.ans(f"{saved}", "rub")
            await bot.send_message(msg.from_user.id, f"{ans_bot}")
            await bot.send_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
        except:
            await bot.send_message(msg.from_user.id, "–í–∞—Å –Ω–µ—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≤–∞–ª—é—Ç—É —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", reply_markup=kb.greet_kb1)

    elif msg.text == '–°—É–º üá∫üáø':
        try:
            saved = db.get_saved(msg.from_user.id)
            ans_bot = cs.ans(f"{saved}", "uzb")
            await bot.send_message(msg.from_user.id, f"{ans_bot}")
            await bot.send_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
        except:
            await bot.send_message(msg.from_user.id, "–í–∞—Å –Ω–µ—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≤–∞–ª—é—Ç—É —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", reply_markup=kb.greet_kb1)
    else:
        try:
            x = int(msg.text)
            cs.valut(x)
            await bot.send_message(msg.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —ç—Ç–∏ —Å—É–º–º—ã", reply_markup=kb.greet_kb)
        except:
            await bot.send_message(msg.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ü–∏—Ñ—Ä–∞—Ö !!!")

if __name__ == '__main__':
    executor.start_polling(dp)

